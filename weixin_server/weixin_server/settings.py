# -*- coding: utf-8 -*-
"""
Django settings for weixin_server project.

Generated by 'django-admin startproject' using Django 1.8.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from path import path

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = path(BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'c&1(ol!c7&k9hz*u@!vw(@m2=lb#=kmu1+ez+lt+s4=!+$zy*^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'social.apps.django_app.default',
    'mako',
    'djangomako',

    'config_models',
    'weixin',
    'myauth',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'djangomako.middleware.MakoMiddleware',
    #'social.apps.django_app.middleware.SocialAuthExceptionMiddleware',
)

AUTHENTICATION_BACKENDS = (
    #'social_auth.backends.contrib.weixin.WeixinBackend',
    'social.backends.weixin.WeixinOAuth2APP',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_PIPELINE = (
    'social.pipeline.social_auth.social_details',
    'social.pipeline.social_auth.social_uid',
    # 判断当前三方账号是否已经绑定在其他账户上
    # 判断当前账户是否绑定了多个同一平台的账号
    'myauth.pipeline.social_auth.social_user',
    'social.pipeline.user.get_username',
    'social.pipeline.user.create_user',
    'social.pipeline.social_auth.associate_user',
    'myauth.pipeline.user.save_profile',
    'myauth.pipeline.user.invite_user',
    'social.pipeline.social_auth.load_extra_data',
    'social.pipeline.user.user_details',
)
LOGIN_URL = '/login/weixinapp/'
SOCIAL_AUTH_LOGIN_URL = '/login-url/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/login-error'
# 已经绑定未登录用户登录
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/oauth/authentication/success/'
# 未绑定新用户登录
SOCIAL_AUTH_NEW_USER_REDIRECT_URL = '/oauth/authentication/success/'
# 已登录 未绑定或者绑定用户到这里, 如果只针对微信用户而且没有绑定的功能,
# 那么用户是不太关心绑定的view的
SOCIAL_AUTH_NEW_ASSOCIATION_REDIRECT_URL = '/oauth/authentication/success/'

SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['inviter_id', 'next']

SOCIAL_AUTH_INACTIVE_USER_LOGIN = True
SOCIAL_AUTH_WEIXINAPP_KEY = 'weixin app id'
SOCIAL_AUTH_WEIXINAPP_SECRET = 'weixin app secret'
SOCIAL_AUTH_WEIXINAPP_SCOPE = ['snsapi_userinfo',]
SOCIAL_AUTH_WEIXINAPP_FIELDS_STORED_IN_SESSION = ['inviter_id', 'next']

ROOT_URLCONF = 'weixin_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            PROJECT_ROOT / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social.apps.django_app.context_processors.backends',
                'social.apps.django_app.context_processors.login_redirect',
            ],
        },
    },
]

MAKO_TEMPLATE_DIRS = TEMPLATES[0]['DIRS']

WSGI_APPLICATION = 'weixin_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

TIME_ZONE = 'Asia/Chongqing'  # http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
LANGUAGE_CODE = 'zh-hans'  # http://www.i18nguy.com/unicode/language-identifiers.html


USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'

SITE_NAME = 'local.test.com'

# weixin config
WEIXIN_TOKEN = 'Your weixin token'
WEIXIN_APP_ID = 'Your weixin app id'
WEIXIN_APP_SECRET = 'Your weixin app secret'
WEIXIN_ENCODING_AES_KEY = 'Your weixin encoding aes key'
WEIXIN_ENCRYPT_MODE = 'safe' # safe | compatible | normal

WEIXIN_PAY_CERT_PATH = 'cert_folder_path' # 证书文件夹路径
# 四个证书具体路径
WEIXIN_PAY_P12_CERT_PATH = 'apiclient_cert.p12_file_path'
WEIXIN_PAY_CERT_PATH = 'apiclient_cert.pem_file_path'
WEIXIN_PAY_CERT_KEY_PATH = 'apiclient_key.pem_file_path'
WEIXIN_PAY_CA_CERT_PATH = 'rootca.pem_file_path'
WEIXIN_PAY_API_KEY = '' # 微信商户平台api安全中设置的安全码
WEINXIN_PAY_MCH_ID = '' # 微信商户平台id

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': #'%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
            '%(asctime)s %(levelname)s %(thread)d %(process)d [%(name)s] %(pathname)s:%(funcName)s %(lineno)d - %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'tracking': {
            'format': '%(message)s'
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        }
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console'],
            'propagate': False,
        },
        '': {
            'handlers': ['console'],
            'propagate': False
        },
    }
}

try:
    from .local_settings import *
except:
    pass
